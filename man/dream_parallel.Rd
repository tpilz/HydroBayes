% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dream_parallel.R
\name{dream_parallel}
\alias{dream_parallel}
\title{Differential Evolution Adaptive Metropolis (DREAM) algorithm}
\usage{
dream_parallel(fun, ..., lik = NULL, par.info = list(initial = NULL, min =
  NULL, max = NULL, mu = NULL, cov = NULL, val_ini = NULL, bound = NULL, names =
  NULL, prior = "flat"), nc, t, d, burnin = 0, adapt = 0.1,
  updateInterval = 10, delta = 3, c_val = 0.1, c_star = 1e-12,
  nCR = 3, p_g = 0.2, beta0 = 1, thin = 1, outlier_check = TRUE,
  obs = NULL, abc_rho = NULL, abc_e = NULL, glue_shape = NULL,
  lik_fun = NULL, past_sample = FALSE, m0 = NULL, archive_update = NULL,
  psnooker = 0, mt = 1, ncores = 1, checkConvergence = FALSE,
  verbose = TRUE)
}
\arguments{
\item{fun}{\code{character}. Name of a function(x, ...) which is evaluated at x being a
d-dimensional parameter vector. Returns a likelihood, log-likelihood, simulation values or summary statistics
depending on argument \code{lik}.}

\item{...}{Additional arguments for \code{fun}.}

\item{lik}{\code{integer}. Flag specifying a likelihood function to be used, see details.}

\item{par.info}{A \code{list} of parameter information (see arguments \code{initial}, \code{min}, \code{max},
\code{mu}, \code{cov}, \code{val_ini}, \code{bound}, \code{names}, and \code{prior} below).}

\item{nc}{\code{numeric}. Number of chains evolved in parallel.}

\item{t}{\code{numeric}. Number of samples from the Markov chain.}

\item{d}{\code{numeric}. Number of parameters.}

\item{burnin}{\code{numeric}. Length of the burn-in period as portion of t (\code{burnin period = burnin * t}).
These samples from the Markov chain will not be included in the output. Default: 0.}

\item{adapt}{\code{numeric}. Length of the adaptation period as portion of t
(\code{adaptation period = adapt * t}). Will be used for the update of crossover probabilities (NB: useful
if some parameter are correlated as they will get a higher chance of being updated jointly) and
the replacement of outlier chains (NB: this can enhance convergence to the target distribution). Default: 0.1.}

\item{updateInterval}{\code{integer}. Interval for crossover probability updates during the adaptation period.}

\item{delta}{\code{integer}. Maximum number of chain pairs used to generate the jump (default: 3).}

\item{c_val}{\code{numeric}. Lambda value is sampled from U[-c_val,c_val] (default: 0.1).}

\item{c_star}{\code{numeric}. Zeta value sampled from N[0,c_star]. Should be small compared to target
(i.e. in this case the normal) distribution. Default: 1e-12.}

\item{nCR}{\code{integer}. Length of vector with crossover probabilities for parameter subspace sampling (default: 3).}

\item{p_g}{\code{numeric}. Probability for gamma, the jump rate, being equal to 1. Default: 0.2.}

\item{beta0}{\code{numeric}. Reduce jump distance, e.g. if the average acceptance rate is low (less than 15 \%).
\code{0 < beta0 <= 1}. Default: 1 (i.e. jump distance is not adjusted).}

\item{thin}{\code{integer}. Thinning to be applied to output in case of large \code{t}. See below.}

\item{outlier_check}{\code{logical}. Shall outlier chains be identified and removed (only if
\code{past_sample == FALSE})? Default: \code{TRUE}.}

\item{obs}{\code{numeric} vector of observations to be compared with output of \code{fun}. Only needed for some
realisations of \code{lik} (see details).}

\item{abc_rho}{\code{character}. Name of an ABC distance function(sim, obs) calculating the distance between
simulated ('sim', output of \code{fun}) and observed (\code{obs}) diagnostic values. Needed for ABC methods of
\code{lik}.}

\item{abc_e}{\code{numeric} vector of length of \code{obs} specifying the ABC tolerance value (\code{lik = 22})
or representing the standard deviations for each summary statistics (e.g. streamflow signatures) returned
by \code{fun} (\code{lik = 21}).}

\item{glue_shape}{\code{numeric} scalar value used for GLUE-based informal likelihood functions (see details).}

\item{lik_fun}{\code{character} specifying the name of a user-defined likelihood function(sim, obs) with sim
being the output of \code{fun} and obs a vector of corresponding observations (argument \code{obs} above).}

\item{past_sample}{\code{logical}. Shall proposal generation by sampling from past states be applied
(i.e., DREAM(zs))? Default: \code{FALSE}.}

\item{m0}{\code{integer}. The initial archive size (needed if \code{past_sample == TRUE}). Default: \code{NULL}
(if \code{past_sample == TRUE} and \code{is.null(m0)} it will be set to \code{10*d}).}

\item{archive_update}{\code{integer}. Update the archive by appending the current state of each Markov chain
at every [\code{archive_update}]th iteration. Default: \code{NULL} (if \code{past_sample == TRUE} and
\code{is.null(archive_update)} it will be set to 10).}

\item{psnooker}{\code{numeric} value giving the probability for a snooker (instead of the conventional parallel
direction) jump. Might be useful for complex target distributions to enhance the diversity of proposals.
In such a case, a recommended value is 0.1. Otherwise, leave it at zero to prevent snooker updates (the default).
NOTE: Can only be applied if \code{past_sample == TRUE}!}

\item{mt}{\code{integer} specifying the number of sampling trials. A value greater one results in MT-DREAM.
Default: 1.}

\item{ncores}{\code{integer} specifying the number of CPU cores to be used. If > 1, packages \code{\link[doMC]{doMC}}
(Linux only!) and \code{\link[parallel]{parallel}} are needed. Values > 1 only useful if \code{fun} is very
complex and computational demanding, otherwise multiple thread handling will cause function slowdown! Default: 1.}

\item{checkConvergence}{\code{logical}. Shall convergence of the MCMC chain be checked? Currently implemented:
Calculating the Gelman-Rubin diagnostic. Takes a lot of time! Default: FALSE.}

\item{verbose}{\code{logical}. Print progress bar to console? Default: TRUE.}

\item{initial}{\code{character}. Method for prior sampling. One of: uniform - sampling from a uniform distribution;
normal - a (multivariate) normal distribution; latin - latin hypercube sampling; user - value(s) given by the user.}

\item{min}{\code{numeric}. A d-dimensional vector of minimum values for each parameter to sample from if
\code{initial} is 'uniform' or 'latin'. Also defines bounding region for the proposal, see \code{bound}.}

\item{max}{\code{numeric}. A d-dimensional vector of maximum values for each parameter to sample from if
\code{initial} is 'uniform' or 'latin'. Also defines bounding region for the proposal, see \code{bound}.}

\item{mu}{\code{numeric}. d-dimensional vector of parameter means if \code{initial} is 'normal'.}

\item{cov}{\code{numeric}. d-by-d positive-definite symmetric matrix of parameter covariances if
\code{initial} is 'normal'.}

\item{val_ini}{\code{numeric} nc-by-d-dimensional matrix of prior values if \code{initial} is 'user'.}

\item{bound}{\code{character}. What to do if the proposal parameter is outside the defined min-max limits.
One of: bound - proposal is set to min/max value if it is smaller/larger than the defined limit. reflect -
parameter value is reflected at the boundary towards the feasible space by the amount of boundary violation.
fold - upper bound of each parameter dimension is connected to its respective lower bound (NOTE: this ensures
detailed balance of the MCMC simulation but may lead to inflation of acceptance rates of prposals). NULL
(default): nothing is done and proposals outside the feasible parameter range will be evaluated as well.}

\item{names}{\code{character} vector of length d with names for the parameters. These can be used within \code{fun}
(in this case, parameter input x of \code{fun} is a named vector) and will appear in the output list element 'chain'.}

\item{prior}{\code{character} specifying the prior pdf, i.e. posterior ~ prior x likelihood. One of: 'flat'
(non-informative prior, log-pdf set to zero and posterior ~ likelihood; DEFAULT); 'uniform' (prior is assumed to be uniformly distributed between \code{min} and \code{max};
multiplicative prior, parameters must not be correlated!); 'normal' (prior assumed to be normally distributed with
\code{mu} and \code{cov}, i.e. parameters may be correlated); name of a user-defined function(x) with x being a
d-dimensional parameter vector and returning the log-density of the d-variate prior distribution at x.}
}
\value{
\code{list} with named elements:

\emph{chain}: a (1-burnin)*t/thin-by-d+3-by-nc array of parameter realisations and the log-pdfs of the prior ('lp'),
likelihood ('ll'), and posterior ('lpost') distribution for each iteration and Markov chain;

\emph{fx}: a (1-burnin)*t/thin-by-nc-by-[length of \code{fun}'s output] array of raw output of \code{fun},
corresponds with parameter realisations in chain;

\emph{runtime}: time of function execution;

\emph{outlier}: a list with adapt*t vectors of outlier indices in nc (value of 0 means no outliers);

\emph{AR}: a (1-burnin)*t/thin-by-nCR matrix giving the acceptance rate for each sample number and crossover value
(first element is NA due to computational reasons);

\emph{CR}: a (1-burnin)*t/thin-by-nCR matrix giving the selection probability for each sample number and crossover value
(first element is NA due to computational reasons).

IF checkConvergence == TRUE:

\emph{R_stat}: a (1-burnin)*t/thin-50+1-by-d matrix giving the Gelman-Rubin convergence diagnostic
(note that at least 50 observations are used to compute R_stat).
}
\description{
Implementation of the DREAM algorithm, including variations (such as DREAM(zs) and DEAM(ABC))
depending on certain argument settings.
}
\details{
To understand the notation (e.g. what is lambda, nCR etc.), have a look at Sect. 3.3
of the reference paper (see below).

Likelihood options (argument \code{lik}):

1: \code{fun} returns the likelihood of parameter realisation x given some observations.

2: \code{fun} returns the log-likelihood.

21: ABC diagnostic model evaluation using a continuous fitness kernel, a variation of so-called noisy-ABC.

22: ABC diagnostic model evaluation using a Boxcar likelihood. \code{fun} has to return m diagnostic values
to be compared with observations. Requires arguments \code{obs}, \code{abc_rho}, and \code{abc_e}. Modification
in computation of Metropolis probability is used (Eq. 13 of Sadegh and Vrugt, 2014). Prior pdf set to zero!

31: GLUE with informal likelihood function based on the NSE: \code{glue_shape * log(NSE)}. \code{fun} needs to
return a time series of model simulations and \code{obs} should contain a time series of corresponding observations.
\code{glue_shape} affects the sampling: small values result in high parameter uncertainty, large values produce
narrow posterior pdfs of parameters. Should be in the range of 1-100 (experiment!).

99: A user-defined function, see argument \code{lik_fun}.
}
\note{
If you want to use a non-implemented likelihood function with nuisance variables to be calibrated along
with the actual model parameters, it is suggested to implement the likelihood calculation directly into \code{fun}.
}
\references{
Code based on:

Vrugt, J. A.: "Markov chain Monte Carlo simulation using the DREAM software package:
Theory, concepts, and MATLAB implementation." Environmental Modelling & Software, 2016, 75, 273 -- 316,
\url{http://dx.doi.org/10.1016/j.envsoft.2015.08.013}.

For ABC method see:

Sadegh, M. and J. A. Vrugt: "Approximate Bayesian computation using Markov Chain Monte Carlo simulation:
DREAM_ABC". Water Resources Research, 2014, 50, 6767 -- 6787, \url{http://dx.doi.org/10.1002/2014WR015386}.

For MT-DREAM(ZS) see:

Laloy, E. and J. A. Vrugt: "High-dimensional posterior exploration of hydrologic models using multiple-try
DREAM(ZS) and high-performance computing". Water Resources Research, 2012, 48, W01526, \url{http://dx.doi.org/10.1029/2011WR010608}.
}
\author{
Tobias Pilz \email{tpilz@uni-potsdam.de}
}
